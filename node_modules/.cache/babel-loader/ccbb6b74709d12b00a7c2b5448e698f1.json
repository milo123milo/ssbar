{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @function removeMarkdown\n *\n * @description\n * Parse the markdown and returns a string\n *\n * @param markdown - The markdown string to parse\n * @param options - The options for the function\n *\n * @returns The parsed plain text\n */\n\nvar removeMarkdown = function (markdown, options) {\n  if (options === void 0) {\n    options = {\n      listUnicodeChar: \"\"\n    };\n  }\n\n  options = options || {};\n  options.listUnicodeChar = options.hasOwnProperty(\"listUnicodeChar\") ? options.listUnicodeChar : false;\n  options.stripListLeaders = options.hasOwnProperty(\"stripListLeaders\") ? options.stripListLeaders : true;\n  options.gfm = options.hasOwnProperty(\"gfm\") ? options.gfm : true;\n  options.useImgAltText = options.hasOwnProperty(\"useImgAltText\") ? options.useImgAltText : true;\n  var output = markdown || \"\"; // Remove horizontal rules (stripListHeaders conflict with this rule, which is why it has been moved to the top)\n\n  output = output.replace(/^(-\\s*?|\\*\\s*?|_\\s*?){3,}\\s*$/gm, \"\");\n\n  try {\n    if (options.stripListLeaders) {\n      if (options.listUnicodeChar) output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, options.listUnicodeChar + \" $1\");else output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, \"$1\");\n    }\n\n    if (options.gfm) {\n      output = output // Header\n      .replace(/\\n={2,}/g, \"\\n\") // Fenced codeblocks\n      .replace(/~{3}.*\\n/g, \"\") // Strikethrough\n      .replace(/~~/g, \"\") // Fenced codeblocks\n      .replace(/`{3}.*\\n/g, \"\");\n    }\n\n    output = output // Remove HTML tags\n    .replace(/<[^>]*>/g, \"\") // Remove setext-style headers\n    .replace(/^[=\\-]{2,}\\s*$/g, \"\") // Remove footnotes?\n    .replace(/\\[\\^.+?\\](\\: .*?$)?/g, \"\").replace(/\\s{0,2}\\[.*?\\]: .*?$/g, \"\") // Remove images\n    .replace(/\\!\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, options.useImgAltText ? \"$1\" : \"\") // Remove inline links\n    .replace(/\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, \"$1\") // Remove blockquotes\n    .replace(/^\\s{0,3}>\\s?/g, \"\").replace(/(^|\\n)\\s{0,3}>\\s?/g, \"\\n\\n\") // Remove reference-style links?\n    .replace(/^\\s{1,2}\\[(.*?)\\]: (\\S+)( \".*?\")?\\s*$/g, \"\") // Remove atx-style headers\n    .replace(/^(\\n)?\\s{0,}#{1,6}\\s+| {0,}(\\n)?\\s{0,}#{0,} {0,}(\\n)?\\s{0,}$/gm, \"$1$2$3\") // Remove emphasis (repeat the line to remove double emphasis)\n    .replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, \"$2\").replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, \"$2\") // Remove code blocks\n    .replace(/(`{3,})(.*?)\\1/gm, \"$2\") // Remove inline code\n    .replace(/`(.+?)`/g, \"$1\") // Replace two or more newlines with exactly two? Not entirely sure this belongs here...\n    .replace(/\\n{2,}/g, \"\\n\\n\");\n  } catch (e) {\n    console.error(e);\n    return markdown;\n  }\n\n  return output;\n};\n\nexports.default = removeMarkdown;","map":{"version":3,"sources":["/Users/milo/Documents/Diverse/meteo ui/stbar2/node_modules/markdown-to-text/dist/index.js"],"names":["Object","defineProperty","exports","value","removeMarkdown","markdown","options","listUnicodeChar","hasOwnProperty","stripListLeaders","gfm","useImgAltText","output","replace","e","console","error","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @function removeMarkdown\n *\n * @description\n * Parse the markdown and returns a string\n *\n * @param markdown - The markdown string to parse\n * @param options - The options for the function\n *\n * @returns The parsed plain text\n */\nvar removeMarkdown = function (markdown, options) {\n    if (options === void 0) { options = {\n        listUnicodeChar: \"\",\n    }; }\n    options = options || {};\n    options.listUnicodeChar = options.hasOwnProperty(\"listUnicodeChar\")\n        ? options.listUnicodeChar\n        : false;\n    options.stripListLeaders = options.hasOwnProperty(\"stripListLeaders\")\n        ? options.stripListLeaders\n        : true;\n    options.gfm = options.hasOwnProperty(\"gfm\") ? options.gfm : true;\n    options.useImgAltText = options.hasOwnProperty(\"useImgAltText\")\n        ? options.useImgAltText\n        : true;\n    var output = markdown || \"\";\n    // Remove horizontal rules (stripListHeaders conflict with this rule, which is why it has been moved to the top)\n    output = output.replace(/^(-\\s*?|\\*\\s*?|_\\s*?){3,}\\s*$/gm, \"\");\n    try {\n        if (options.stripListLeaders) {\n            if (options.listUnicodeChar)\n                output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, options.listUnicodeChar + \" $1\");\n            else\n                output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, \"$1\");\n        }\n        if (options.gfm) {\n            output = output\n                // Header\n                .replace(/\\n={2,}/g, \"\\n\")\n                // Fenced codeblocks\n                .replace(/~{3}.*\\n/g, \"\")\n                // Strikethrough\n                .replace(/~~/g, \"\")\n                // Fenced codeblocks\n                .replace(/`{3}.*\\n/g, \"\");\n        }\n        output = output\n            // Remove HTML tags\n            .replace(/<[^>]*>/g, \"\")\n            // Remove setext-style headers\n            .replace(/^[=\\-]{2,}\\s*$/g, \"\")\n            // Remove footnotes?\n            .replace(/\\[\\^.+?\\](\\: .*?$)?/g, \"\")\n            .replace(/\\s{0,2}\\[.*?\\]: .*?$/g, \"\")\n            // Remove images\n            .replace(/\\!\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, options.useImgAltText ? \"$1\" : \"\")\n            // Remove inline links\n            .replace(/\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, \"$1\")\n            // Remove blockquotes\n            .replace(/^\\s{0,3}>\\s?/g, \"\")\n            .replace(/(^|\\n)\\s{0,3}>\\s?/g, \"\\n\\n\")\n            // Remove reference-style links?\n            .replace(/^\\s{1,2}\\[(.*?)\\]: (\\S+)( \".*?\")?\\s*$/g, \"\")\n            // Remove atx-style headers\n            .replace(/^(\\n)?\\s{0,}#{1,6}\\s+| {0,}(\\n)?\\s{0,}#{0,} {0,}(\\n)?\\s{0,}$/gm, \"$1$2$3\")\n            // Remove emphasis (repeat the line to remove double emphasis)\n            .replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, \"$2\")\n            .replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, \"$2\")\n            // Remove code blocks\n            .replace(/(`{3,})(.*?)\\1/gm, \"$2\")\n            // Remove inline code\n            .replace(/`(.+?)`/g, \"$1\")\n            // Replace two or more newlines with exactly two? Not entirely sure this belongs here...\n            .replace(/\\n{2,}/g, \"\\n\\n\");\n    }\n    catch (e) {\n        console.error(e);\n        return markdown;\n    }\n    return output;\n};\nexports.default = removeMarkdown;\n"]},"metadata":{},"sourceType":"script"}