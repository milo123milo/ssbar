{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/*!\n* focus-trap 7.5.2\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { isFocusable, tabbable, focusable, isTabbable, getTabIndex } from 'tabbable';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    var trapIndex = trapStack.indexOf(trap);\n\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\n\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\n\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\n\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n}; // checks for TAB by default\n\n\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n}; // checks for SHIFT+TAB by default\n\n\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n}; // Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\n\n\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n  return idx;\n};\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\n\n\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\n\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n}; // NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\n\n\nvar internalTrapStack = [];\n\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n\n\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined; // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n          tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || ( // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n\n\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n\n      optionValue = optionValue.apply(void 0, params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      } // else, empty string (invalid), null (invalid), 0 (invalid)\n\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n\n    return node;\n  };\n\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus'); // false explicitly indicates we want no initialFocus at all\n\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode; // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n\n    return node;\n  };\n\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions); // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    }); // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    } // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n\n\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({\n      preventScroll: !!config.preventScroll\n    }); // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n\n\n  var findNextNavNode = function findNextNavNode(_ref2) {\n    var target = _ref2.target,\n        event = _ref2.event,\n        _ref2$isBackward = _ref2.isBackward,\n        isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var firstTabbableNode = _ref3.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref4) {\n          var lastTabbableNode = _ref4.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    return destinationNode;\n  }; // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n\n\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    } // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    } // otherwise, prevent the click\n\n\n    e.preventDefault();\n  }; // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n\n\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0; // In Firefox when you Tab out of an iframe the Document is briefly focused.\n\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation(); // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n\n      var nextNode; // next node to focus, if we find one\n\n      var navAcrossContainers = true;\n\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode); // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                } // else, don't wrap within the container as focus should move to next/previous\n                //  container\n\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                } // else, don't wrap within the container as focus should move to next/previous\n                //  container\n\n              } // else, don't find in container order without considering direction too\n\n            }\n          } // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n\n    state.recentNavEvent = undefined; // clear\n  }; // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n\n\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n\n      tryFocus(destinationNode);\n    } // else, let the browser take care of [shift+]tab and move the focus\n\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }; //\n  // EVENT LISTENERS\n  //\n\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    } // There can be only one listening focus trap at a time\n\n\n    activeFocusTraps.activateTrap(trapStack, trap); // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  }; //\n  // MUTATION OBSERVER\n  //\n\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    }); // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  }; // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n\n\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n\n    mutationObserver.disconnect();\n\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  }; //\n  // TRAP DEFINITION\n  //\n\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 ? void 0 : onActivate();\n\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();\n\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n\n          onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 ? void 0 : onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      updateObservedNodes();\n      return this;\n    }\n  }; // initialize container elements\n\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };","map":{"version":3,"mappings":"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","names":["activeFocusTraps","activateTrap","trapStack","trap","length","activeTrap","pause","trapIndex","indexOf","push","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","key","keyCode","isTabEvent","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","params","_len","_key","arguments","getActualTarget","event","target","shadowRoot","composedPath","internalTrapStack","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","recentNavEvent","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","container","tabbableNodes","contains","includes","find","getNodeForOption","optionValue","_len2","_key2","Error","querySelector","getInitialFocusNode","isFocusable","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","focusableNodes","focusable","lastTabbableNode","firstDomTabbableNode","isTabbable","lastDomTabbableNode","slice","reverse","posTabIndexesFound","getTabIndex","nextTabbableNode","forward","nodeIdx","el","filter","group","g","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","findNextNavNode","_ref2","_ref2$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","destinationGroupIndex","destinationGroup","lastOfGroupIndex","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","nextNode","navAcrossContainers","mruContainerIdx","mruTabIdx","some","n","checkKeyNav","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","checkDomRemoval","mutations","isFocusedNodeRemoved","mutation","removedNodes","Array","from","mutationObserver","window","MutationObserver","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","concat","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean"],"sources":["../index.js"],"sourcesContent":["import {\n  tabbable,\n  focusable,\n  isFocusable,\n  isTabbable,\n  getTabIndex,\n} from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e?.key === 'Escape' || e?.key === 'Esc' || e?.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e?.key === 'Tab' || e?.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element, event) {\n    const composedPath =\n      typeof event?.composedPath === 'function'\n        ? event.composedPath()\n        : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        composedPath?.includes(container) ||\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      const firstTabbableNode =\n        tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      const lastTabbableNode =\n        tabbableNodes.length > 0\n          ? tabbableNodes[tabbableNodes.length - 1]\n          : undefined;\n\n      const firstDomTabbableNode = focusableNodes.find((node) =>\n        isTabbable(node)\n      );\n      const lastDomTabbableNode = focusableNodes\n        .slice()\n        .reverse()\n        .find((node) => isTabbable(node));\n\n      const posTabIndexesFound = !!tabbableNodes.find(\n        (node) => getTabIndex(node) > 0\n      );\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound,\n\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode,\n\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          const nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes\n                .slice(focusableNodes.indexOf(node) + 1)\n                .find((el) => isTabbable(el));\n            }\n\n            return focusableNodes\n              .slice(0, focusableNodes.indexOf(node))\n              .reverse()\n              .find((el) => isTabbable(el));\n          }\n\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (\n      state.containerGroups.find((g) => g.posTabIndexesFound) &&\n      state.containerGroups.length > 1\n    ) {\n      throw new Error(\n        \"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\"\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  const findNextNavNode = function ({ target, event, isBackward = false }) {\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target, event);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.lastTabbableNode\n              : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.firstTabbableNode\n              : destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  const checkFocusIn = function (event) {\n    const target = getActualTarget(event);\n    const targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      let nextNode; // next node to focus, if we find one\n      let navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          const mruContainerIdx = findContainerIndex(\n            state.mostRecentlyFocusedNode\n          );\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          const { tabbableNodes } = state.containerGroups[mruContainerIdx];\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            const mruTabIdx = tabbableNodes.findIndex(\n              (node) => node === state.mostRecentlyFocusedNode\n            );\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (\n            !state.containerGroups.some((g) =>\n              g.tabbableNodes.some((n) => getTabIndex(n) > 0)\n            )\n          ) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent),\n        });\n      }\n\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    state.recentNavEvent = event;\n\n    const destinationNode = findNextNavNode({ event, isBackward });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  const checkDomRemoval = function (mutations) {\n    const isFocusedNodeRemoved = mutations.some(function (mutation) {\n      const removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  const mutationObserver =\n    typeof window !== 'undefined' && 'MutationObserver' in window\n      ? new MutationObserver(checkDomRemoval)\n      : undefined;\n\n  const updateObservedNodes = function () {\n    if (!mutationObserver) {\n      return;\n    }\n\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true,\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      const onPause = getOption(pauseOptions, 'onPause');\n      const onPostPause = getOption(pauseOptions, 'onPostPause');\n\n      state.paused = true;\n      onPause?.();\n\n      removeListeners();\n      updateObservedNodes();\n\n      onPostPause?.();\n      return this;\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      const onUnpause = getOption(unpauseOptions, 'onUnpause');\n      const onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n\n      state.paused = false;\n      onUnpause?.();\n\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n\n      onPostUnpause?.();\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      updateObservedNodes();\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"]},"metadata":{},"sourceType":"module"}